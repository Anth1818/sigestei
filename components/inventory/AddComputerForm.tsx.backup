"use client";

import { useState } from "react";
import { useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { createEquipment, fetchCatalogs } from "@/api/api";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import { DepartmentUserSelector } from "@/components/shared/DepartmentUserSelector";
import { useUserStore } from "@/hooks/useUserStore";
import { CreateComputerEquipmentInput } from "@/lib/types";

const computerSchema = z.object({
  serial_number: z.string().min(5, "El número de serie es requerido"),
  model: z.string().min(2, "El modelo es requerido"),
  brand_id: z.string().min(1, "La marca es requerida"),
  type_id: z.string().min(1, "El tipo de equipo es requerido"),
  location: z.string().min(1, "La ubicación es requerida"),
  status_id: z.string().min(1, "El estado es requerido"),
  asset_number: z.string().min(1, "El número de bien es requerido"),
  assigned_user_id: z.string().min(1, "Debe asignar un usuario"),
  // Hardware specs
  cpu: z.string().min(3, "El procesador es requerido"),
  ram: z.string().min(2, "La memoria RAM es requerida"),
  storage: z.string().min(3, "El almacenamiento es requerido"),
  gpu: z.string().min(3, "La tarjeta gráfica es requerida"),
  network: z.string().min(3, "Las opciones de red son requeridas"),
  // Software
  os: z.string().min(3, "El sistema operativo es requerido"),
  office: z.string().min(3, "La suite de oficina es requerida"),
  antivirus: z.string().min(3, "El antivirus es requerido"),
});

type ComputerFormData = z.infer<typeof computerSchema>;

export const AddComputerForm = () => {
  const router = useRouter();
  const queryClient = useQueryClient();
  const { user } = useUserStore();

  // Estados para DepartmentUserSelector
  const [selectedDepartmentId, setSelectedDepartmentId] = useState("");
  const [selectedUserId, setSelectedUserId] = useState("");

  // Obtener catálogos
  const { data: catalogsData, isLoading: catalogsLoading } = useQuery({
    queryKey: ["catalogs"],
    queryFn: fetchCatalogs,
  });

  const {
    control,
    handleSubmit,
    reset,
    formState: { errors }
  } = useForm<ComputerFormData>({
    resolver: zodResolver(computerSchema),
    defaultValues: {
      serial_number: "",
      model: "",
      brand_id: "",
      type_id: "",
      location: "",
      status_id: "",
      asset_number: "",
      assigned_user_id: "",
      cpu: "",
      ram: "",
      storage: "",
      gpu: "",
      network: "",
      os: "",
      office: "",
      antivirus: "",
    }
  });

  // Mutation para crear equipo
  const createMutation = useMutation({
    mutationFn: (data: CreateComputerEquipmentInput) => createEquipment(data),
    onSuccess: () => {
      toast.success("Equipo informático registrado exitosamente");
      queryClient.invalidateQueries({ queryKey: ["equipment"] });
      reset();
      setSelectedDepartmentId("");
      setSelectedUserId("");
      router.push("/viewInventory");
    },
    onError: (error: any) => {
      toast.error(
        error?.response?.data?.message ||
          "Error al registrar el equipo. Intenta nuevamente."
      );
    },
  });

  const onSubmit = async (data: ComputerFormData) => {
    const equipmentData: CreateComputerEquipmentInput = {
      asset_number: data.asset_number,
      serial_number: data.serial_number,
      model: data.model,
      location: data.location,
      hardware_specs: {
        cpu: data.cpu,
        gpu: data.gpu,
        ram: data.ram,
        network: data.network,
        storage: data.storage,
      },
      software_specs: {
        os: data.os,
        office: data.office,
        antivirus: data.antivirus,
      },
      assigned_user_id: parseInt(data.assigned_user_id),
      type_id: parseInt(data.type_id),
      brand_id: parseInt(data.brand_id),
      status_id: parseInt(data.status_id),
    };

    createMutation.mutate(equipmentData);
  };

  // Extraer catálogos
  const equipmentBrands = catalogsData?.computer_brands || [];
  const equipmentTypes = catalogsData?.computer_types || [];
  const equipmentStatuses = catalogsData?.computer_statuses || [];
  const departments = catalogsData?.departments || [];

  return (
    <div className="flex justify-center items-center min-h-[80vh] bg-muted/30">
      <Card className="w-full shadow-lg border border-gray-200">
        <CardHeader>
          <CardTitle>Agregar Equipo Informático</CardTitle>
        </CardHeader>
        <Separator />
        <CardContent>
          <form className="flex flex-col gap-5" onSubmit={handleSubmit(onSubmit)} noValidate>
            {/* Información General del Equipo */}
            <div>
              <h3 className="text-lg font-semibold mb-3">Información General</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="type" className="pb-2">Tipo de equipo</Label>
                  <Controller
                    name="type"
                    control={control}
                    render={({ field }) => (
                      <Select value={field.value} onValueChange={field.onChange}>
                        <SelectTrigger id="type" className="w-full">
                          <SelectValue placeholder="Seleccione tipo" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="PC">PC</SelectItem>
                          <SelectItem value="Laptop">Laptop</SelectItem>
                        </SelectContent>
                      </Select>
                    )}
                  />
                  {errors.type && <span className="text-red-500 text-xs">{errors.type.message}</span>}
                </div>
                <div>
                  <Label htmlFor="name" className="pb-2">Nombre del Equipo</Label>
                  <Controller
                    name="name"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="name"
                        placeholder="Ej: Dell OptiPlex 7090"
                        required
                      />
                    )}
                  />
                  {errors.name && <span className="text-red-500 text-xs">{errors.name.message}</span>}
                </div>
                <div>
                  <Label htmlFor="serial_number" className="pb-2">Número de Serie</Label>
                  <Controller
                    name="serial_number"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="serial_number"
                        placeholder="Ej: DL001234"
                        required
                      />
                    )}
                  />
                  {errors.serial_number && <span className="text-red-500 text-xs">{errors.serial_number.message}</span>}
                </div>
                <div>
                  <Label htmlFor="model" className="pb-2">Modelo</Label>
                  <Controller
                    name="model"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="model"
                        placeholder="Ej: OptiPlex 7090"
                        required
                      />
                    )}
                  />
                  {errors.model && <span className="text-red-500 text-xs">{errors.model.message}</span>}
                </div>
                <div>
                  <Label htmlFor="brand" className="pb-2">Marca</Label>
                  <Controller
                    name="brand"
                    control={control}
                    render={({ field }) => (
                      <Select value={field.value} onValueChange={field.onChange}>
                        <SelectTrigger id="brand" className="w-full">
                          <SelectValue placeholder="Seleccione marca" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Dell">Dell</SelectItem>
                          <SelectItem value="HP">HP</SelectItem>
                          <SelectItem value="Lenovo">Lenovo</SelectItem>
                          <SelectItem value="Acer">Acer</SelectItem>
                          <SelectItem value="ASUS">ASUS</SelectItem>
                          <SelectItem value="MSI">MSI</SelectItem>
                          <SelectItem value="Apple">Apple</SelectItem>
                        </SelectContent>
                      </Select>
                    )}
                  />
                  {errors.brand && <span className="text-red-500 text-xs">{errors.brand.message}</span>}
                </div>
                <div>
                  <Label htmlFor="location" className="pb-2">Ubicación</Label>
                  <Controller
                    name="location"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="location"
                        placeholder="Ej: Oficina 101 - IT"
                        required
                      />
                    )}
                  />
                  {errors.location && <span className="text-red-500 text-xs">{errors.location.message}</span>}
                </div>
                <div>
                  <Label htmlFor="status" className="pb-2">Estado</Label>
                  <Controller
                    name="status"
                    control={control}
                    render={({ field }) => (
                      <Select value={field.value} onValueChange={field.onChange}>
                        <SelectTrigger id="status" className="w-full">
                          <SelectValue placeholder="Seleccione estado" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Activo">Activo</SelectItem>
                          <SelectItem value="En mantenimiento">En mantenimiento</SelectItem>
                          <SelectItem value="En reparación">En reparación</SelectItem>
                          <SelectItem value="Inactivo">Inactivo</SelectItem>
                        </SelectContent>
                      </Select>
                    )}
                  />
                  {errors.status && <span className="text-red-500 text-xs">{errors.status.message}</span>}
                </div>
                <div>
                  <Label htmlFor="asset_number" className="pb-2">Número de Bien</Label>
                  <Controller
                    name="asset_number"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="asset_number"
                        placeholder="Ej: 123456"
                        required
                      />
                    )}
                  />
                  {errors.asset_number && <span className="text-red-500 text-xs">{errors.asset_number.message}</span>}
                </div>
                <div>
                  <Label htmlFor="assigned_to" className="pb-2">Asignado a</Label>
                  <Controller
                    name="assigned_to"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="assigned_to"
                        placeholder="Ej: John Doe"
                        required
                      />
                    )}
                  />
                  {errors.assigned_to && <span className="text-red-500 text-xs">{errors.assigned_to.message}</span>}
                </div>
              </div>
            </div>

            <Separator />

            {/* Especificaciones de Hardware */}
            <div>
              <h3 className="text-lg font-semibold mb-3">Especificaciones de Hardware</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="cpu" className="pb-2">Procesador (CPU)</Label>
                  <Controller
                    name="cpu"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="cpu"
                        placeholder="Ej: Intel Core i7-10700"
                        required
                      />
                    )}
                  />
                  {errors.cpu && <span className="text-red-500 text-xs">{errors.cpu.message}</span>}
                </div>
                <div>
                  <Label htmlFor="ram" className="pb-2">Memoria RAM</Label>
                  <Controller
                    name="ram"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="ram"
                        placeholder="Ej: 16GB DDR4"
                        required
                      />
                    )}
                  />
                  {errors.ram && <span className="text-red-500 text-xs">{errors.ram.message}</span>}
                </div>
                <div>
                  <Label htmlFor="storage" className="pb-2">Almacenamiento</Label>
                  <Controller
                    name="storage"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="storage"
                        placeholder="Ej: 512GB SSD"
                        required
                      />
                    )}
                  />
                  {errors.storage && <span className="text-red-500 text-xs">{errors.storage.message}</span>}
                </div>
                <div>
                  <Label htmlFor="gpu" className="pb-2">Tarjeta Gráfica (GPU)</Label>
                  <Controller
                    name="gpu"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="gpu"
                        placeholder="Ej: Intel UHD Graphics 630"
                        required
                      />
                    )}
                  />
                  {errors.gpu && <span className="text-red-500 text-xs">{errors.gpu.message}</span>}
                </div>
                <div>
                  <Label htmlFor="network" className="pb-2">Conectividad de Red</Label>
                  <Controller
                    name="network"
                    control={control}
                    render={({ field }) => (
                      <Input
                        {...field}
                        id="network"
                        placeholder="Ej: Ethernet, Wi-Fi"
                        required
                      />
                    )}
                  />
                  {errors.network && <span className="text-red-500 text-xs">{errors.network.message}</span>}
                </div>
              </div>
            </div>

            <Separator />

            {/* Software */}
            <div>
              <h3 className="text-lg font-semibold mb-3">Software</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="os" className="pb-2">Sistema Operativo</Label>
                  <Controller
                    name="os"
                    control={control}
                    render={({ field }) => (
                      <Select value={field.value} onValueChange={field.onChange}>
                        <SelectTrigger id="os" className="w-full">
                          <SelectValue placeholder="Seleccione SO" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Windows 10 Pro">Windows 10 Pro</SelectItem>
                          <SelectItem value="Windows 10 Home">Windows 10 Home</SelectItem>
                          <SelectItem value="Windows 11 Pro">Windows 11 Pro</SelectItem>
                          <SelectItem value="Windows 11 Home">Windows 11 Home</SelectItem>
                          <SelectItem value="macOS">macOS</SelectItem>
                          <SelectItem value="Ubuntu">Ubuntu</SelectItem>
                        </SelectContent>
                      </Select>
                    )}
                  />
                  {errors.os && <span className="text-red-500 text-xs">{errors.os.message}</span>}
                </div>
                <div>
                  <Label htmlFor="office" className="pb-2">Suite de Oficina</Label>
                  <Controller
                    name="office"
                    control={control}
                    render={({ field }) => (
                      <Select value={field.value} onValueChange={field.onChange}>
                        <SelectTrigger id="office" className="w-full">
                          <SelectValue placeholder="Seleccione suite" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Microsoft Office 2019">Microsoft Office 2019</SelectItem>
                          <SelectItem value="Microsoft Office 2021">Microsoft Office 2021</SelectItem>
                          <SelectItem value="Microsoft Office 365">Microsoft Office 365</SelectItem>
                          <SelectItem value="Microsoft Office 2016">Microsoft Office 2016</SelectItem>
                          <SelectItem value="LibreOffice">LibreOffice</SelectItem>
                          <SelectItem value="Google Workspace">Google Workspace</SelectItem>
                        </SelectContent>
                      </Select>
                    )}
                  />
                  {errors.office && <span className="text-red-500 text-xs">{errors.office.message}</span>}
                </div>
                <div>
                  <Label htmlFor="antivirus" className="pb-2">Antivirus</Label>
                  <Controller
                    name="antivirus"
                    control={control}
                    render={({ field }) => (
                      <Select value={field.value} onValueChange={field.onChange}>
                        <SelectTrigger id="antivirus" className="w-full">
                          <SelectValue placeholder="Seleccione antivirus" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Windows Defender">Windows Defender</SelectItem>
                          <SelectItem value="McAfee">McAfee</SelectItem>
                          <SelectItem value="ESET NOD32">ESET NOD32</SelectItem>
                          <SelectItem value="Avast">Avast</SelectItem>
                          <SelectItem value="Kaspersky">Kaspersky</SelectItem>
                          <SelectItem value="Bitdefender">Bitdefender</SelectItem>
                        </SelectContent>
                      </Select>
                    )}
                  />
                  {errors.antivirus && <span className="text-red-500 text-xs">{errors.antivirus.message}</span>}
                </div>
              </div>
            </div>
          </form>
        </CardContent>
        <CardFooter className="flex justify-end">
          <Button
            type="submit"
            onClick={handleSubmit(onSubmit)}
            className="w-full md:w-auto"
            disabled={isSubmitting}
          >
            {isSubmitting ? "Registrando..." : "Registrar Equipo"}
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
};

export default AddComputerForm;
